// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tracking_protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TrackingClient is the client API for Tracking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackingClient interface {
	Add(ctx context.Context, in *IncomingRequest, opts ...grpc.CallOption) (Tracking_AddClient, error)
	Out(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Notify, error)
}

type trackingClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackingClient(cc grpc.ClientConnInterface) TrackingClient {
	return &trackingClient{cc}
}

func (c *trackingClient) Add(ctx context.Context, in *IncomingRequest, opts ...grpc.CallOption) (Tracking_AddClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tracking_serviceDesc.Streams[0], "/Tracking/Add", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackingAddClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tracking_AddClient interface {
	Recv() (*Notify, error)
	grpc.ClientStream
}

type trackingAddClient struct {
	grpc.ClientStream
}

func (x *trackingAddClient) Recv() (*Notify, error) {
	m := new(Notify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackingClient) Out(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, "/Tracking/Out", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackingServer is the server API for Tracking service.
// All implementations must embed UnimplementedTrackingServer
// for forward compatibility
type TrackingServer interface {
	Add(*IncomingRequest, Tracking_AddServer) error
	Out(context.Context, *StopRequest) (*Notify, error)
	mustEmbedUnimplementedTrackingServer()
}

// UnimplementedTrackingServer must be embedded to have forward compatible implementations.
type UnimplementedTrackingServer struct {
}

func (UnimplementedTrackingServer) Add(*IncomingRequest, Tracking_AddServer) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTrackingServer) Out(context.Context, *StopRequest) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Out not implemented")
}
func (UnimplementedTrackingServer) mustEmbedUnimplementedTrackingServer() {}

// UnsafeTrackingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackingServer will
// result in compilation errors.
type UnsafeTrackingServer interface {
	mustEmbedUnimplementedTrackingServer()
}

func RegisterTrackingServer(s *grpc.Server, srv TrackingServer) {
	s.RegisterService(&_Tracking_serviceDesc, srv)
}

func _Tracking_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IncomingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackingServer).Add(m, &trackingAddServer{stream})
}

type Tracking_AddServer interface {
	Send(*Notify) error
	grpc.ServerStream
}

type trackingAddServer struct {
	grpc.ServerStream
}

func (x *trackingAddServer) Send(m *Notify) error {
	return x.ServerStream.SendMsg(m)
}

func _Tracking_Out_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServer).Out(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tracking/Out",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServer).Out(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tracking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Tracking",
	HandlerType: (*TrackingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Out",
			Handler:    _Tracking_Out_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _Tracking_Add_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "desc.proto",
}
